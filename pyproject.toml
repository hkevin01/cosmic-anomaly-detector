[tool.black]
line-length = 79
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 79
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/cosmic_anomaly_detector",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "scientific: marks tests that validate scientific calculations",
    "performance: marks tests that benchmark performance",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "astropy.*",
    "scipy.*",
    "sklearn.*",
    "cv2",
    "PIL.*",
    "matplotlib.*",
    "plotly.*",
    "pydantic.*",
    "yaml",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_errors = true

[tool.coverage.run]
source = ["src/cosmic_anomaly_detector"]
omit = ["*/tests/*", "*/test_*", "*/__init__.py", "*/conftest.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cosmic-anomaly-detector"
version = "0.1.0"
description = "AI-powered detection of artificial structures in space telescope images"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "Cosmic Anomaly Detection Team", email = "contact@cosmic-anomaly-detector.org" },
]
keywords = ["astronomy", "AI", "JWST", "anomaly detection", "SETI"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "pandas>=1.5.0",
    "scikit-learn>=1.2.0",
    "torch>=2.0.0",
    "opencv-python>=4.8.0",
    "astropy>=5.3.0",
    "matplotlib>=3.7.0",
    "requests>=2.31.0",
    "tqdm>=4.65.0",
    "click>=8.1.0",
    "pydantic>=2.6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
]
gpu = ["cupy-cuda11x>=12.0.0"]
docs = ["sphinx>=7.1.0", "sphinx-rtd-theme>=1.3.0"]

[project.urls]
Homepage = "https://github.com/cosmic-anomaly-detection/cosmic-anomaly-detector"
Documentation = "https://cosmic-anomaly-detector.readthedocs.io/"
Repository = "https://github.com/cosmic-anomaly-detection/cosmic-anomaly-detector.git"
Issues = "https://github.com/cosmic-anomaly-detection/cosmic-anomaly-detector/issues"

[project.scripts]
cosmic-analyze = "cosmic_anomaly_detector.cli:main"
cosmic-batch = "scripts.batch_analyze:main"
cad = "cosmic_anomaly_detector.cli:cad"

[tool.setuptools.packages.find]
where = ["src"]
